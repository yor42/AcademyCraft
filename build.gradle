import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'scala'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.16'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

compileJava.options.encoding = "UTF-8"
compileScala.options.encoding = "UTF-8"

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'snapshot'
    mcpMappingVersion = '20180814'

    // Set username here, the UUID will be looked up automatically
    username = 'Developer'

    // Add any additional tweaker classes here
    // extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')

    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true

    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    // Example:
    // injectedTags.put('VERSION', project.version)
    // injectedTags.put('MOD_ID', project.archives_base_name)
}

// Replace the two sourceSet configurations with this single one
sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala', 'src/main/java']
        }
        java {
            srcDirs = []
        }
        output.classesDirs.from(files(
                "$buildDir/classes/scala/main",
                "$buildDir/classes/java/main"
        ))
    }
}

repositories {
    mavenCentral()
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }

    maven {
        name = "chickenbones"
        url = "https://chickenbones.net/maven"
    }

    /*

    maven {
        name = "ic2"
        url = "https://maven.ic2.player.to"
    }

     */

    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
    maven {
        // The main host of CraftTweaker related libs
        name = "jared"
        url = "https://maven.blamejared.com"
    }

    mavenLocal()
}

dependencies {
    if (project.use_assetmover.toBoolean()) {
        implementation 'com.cleanroommc:assetmover:2.5'
    }
    if (project.use_mixins.toBoolean()) {
        implementation 'zone.rong:mixinbooter:7.1'
    }

    // Example of deobfuscating a dependency
    // implementation rfg.deobf('curse.maven:had-enough-items-557549:4543375')

    if (project.use_mixins.toBoolean()) {
        // Change your mixin refmap name here:
        String mixin = modUtils.enableMixins('org.spongepowered:mixin:0.8.3', "mixins.${project.archives_base_name}.refmap.json")
        api (mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:24.1.1-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor (mixin) {
            transitive = false
        }
    }
    // Shade dependencies
    implementation rfg.deobf(files('lib/LambdaLib2-PluginLoader.jar'))
    compileOnly rfg.deobf(files('lib/industrialcraft-2-2.8.170-ex112.jar'))

    implementation 'org.scala-lang:scala-library:2.11.1'  // Changed from Scala 3
    implementation 'org.scala-lang:scala-compiler:2.11.1' // Changed from Scala 3

    // Optional dependencies
    compileOnly rfg.deobf("codechicken:CodeChickenLib:1.12.2-${project.ccl_ver}:universal")
    implementation rfg.deobf('curse.maven:had-enough-items-557549:4543375')
    compileOnly rfg.deobf("curse.maven:groovyscript-687577:5789690")
    implementation rfg.deobf('CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.17.536')
    //compileOnly rfg.deobf("net.industrial-craft:industrialcraft-2:2.8.90-ex112")
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }

    inputs.property "version", project.version
    inputs.property "lambdalib_ver", project.lambdalib_ver
    inputs.property "mc_version", project.minecraft.version

    filesMatching('**/*.java') {
        filter(ReplaceTokens, tokens: [
                'VERSION': project.version,
                'LAMBDA_LIB_VERSION': "[${project.lambdalib_ver}]",
                'MC_VERSION': project.minecraft.version
        ])
    }

    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.archives_base_name + '_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

idea {
    module {
        inheritOutputDirs = true
        sourceDirs += file('src/main/scala')
        testSourceDirs += file('src/test/scala')
        sourceDirs = [file('src/main/java'), file('src/main/scala')]
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}